{"version":3,"sources":["useForm.js","validate.js","getWeb3.js","BlockchainContext.js","OrderCreation.js","OrderSuccess.js","Order.js","App.js","index.js"],"names":["useForm","callback","validate","useState","ID","Cost","productName","Description","leadTime","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","useEffect","Object","keys","length","handleChange","e","target","name","value","handleSubmit","preventDefault","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","request","method","console","log","provider","providers","HttpProvider","React","createContext","undefined","OrderCreation","submitForm","setWeb3","accounts","setAccounts","contract","setContract","setName","order","setOrder","supplyChainProtocol","setSupplyChainProtocol","eth","getAccounts","net","getId","networkId","SupplyChainProtocol","networks","deployedNetwork","Contract","abi","address","from","nonce","init","on","isReady","updateOrders","parseInt","methods","getOrderId","call","id","getOrder","cost","description","leadTime_in_days","elements","ownerOf","owner","_createOrder","send","className","BlockchainContext","Provider","onSubmit","createOrder","noValidate","type","onChange","orderSuccess","Order","isSubmitted","src","alt","OrderSuccess","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c56f5b9c.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useForm = (callback, validate) => {\r\n  const [values, setValues] = useState({\r\n    ID: '',\r\n    Cost: '',\r\n    productName: '',\r\n    Description: '',\r\n    leadTime: ''\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    setErrors (validate(values));\r\n    setIsSubmitting(true);\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      if (Object.keys(errors).length === 0 && isSubmitting) {\r\n        callback();\r\n      }\r\n    },\r\n    [errors]\r\n  );\r\n\r\n  return { handleChange,handleSubmit, values, errors };\r\n};\r\n\r\nexport default useForm;","export default function validate(values) {\r\n  let errors = {};\r\n   if(!values.Description) {\r\n       errors.Description = 'Description is required';\r\n   }\r\n   return errors;\r\n}\r\n","import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.request({method:'eth_requestAccounts'});\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React from 'react';\r\nexport default React.createContext(undefined);\r\n","import React, {useState, useEffect} from 'react';\r\nimport useForm from './useForm';\r\nimport './Order.css';\r\nimport validate from './validate';\r\nimport getWeb3 from './getWeb3';\r\nimport SupplyChainProtocol from './contracts/SupplyChainProtocol.json'\r\nimport BlockchainContext from './BlockchainContext';\r\nconst OrderCreation = ({submitForm}) => {\r\n  const [web3, setWeb3] = useState(undefined);\r\n  const [accounts, setAccounts] = useState(undefined);\r\n  const [contract, setContract] = useState(undefined);\r\n  const [name, setName] = useState(undefined);\r\n  const [order, setOrder] = useState(undefined);\r\n  const [supplyChainProtocol, setSupplyChainProtocol] = useState({});\r\n  const {handleChange, handleSubmit, values} = useForm (\r\n        submitForm,\r\n        validate\r\n        \r\n    );\r\n\r\n    useEffect(() => {\r\n      const init = async () => {\r\n        const web3 = await getWeb3();\r\n        const accounts = await web3.eth.getAccounts(); \r\n        const networkId = await web3.eth.net.getId();\r\n        const deployedNetwork = await SupplyChainProtocol.networks[networkId];\r\n        const contract = await new web3.eth.Contract(\r\n          SupplyChainProtocol.abi,\r\n          deployedNetwork && deployedNetwork.address,\r\n          {from: accounts[0], nonce: \"4\"}\r\n        );\r\n        setSupplyChainProtocol(supplyChainProtocol);\r\n        setName(name);\r\n        setWeb3(web3);\r\n        setAccounts(accounts);\r\n        setContract(contract);\r\n        setOrder(order);\r\n    \r\n      }\r\n      init();\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        setAccounts(accounts);\r\n      });\r\n    }, [])\r\n    const isReady = () => {\r\n      return (\r\n        typeof contract !== \"undefined\" &&\r\n        typeof web3 !== \"undefined\" &&\r\n        typeof accounts !== \"undefined\"\r\n      );\r\n    };\r\n    \r\n    useEffect(() => {\r\n      if(isReady) {\r\n        const abi = SupplyChainProtocol.abi\r\n        console.log(abi);\r\n        \r\n      }\r\n      \r\n    }, [accounts, contract, web3])\r\n    \r\n    async function updateOrders() {\r\n      const id = parseInt(await contract.methods.getOrderId().call());\r\n      const order = await contract.methods.getOrder(id).call();\r\n      setOrder({\r\n        id: order[0],\r\n        cost: order[1],\r\n        productName: order[2],\r\n        description: order[3],\r\n        leadTime_in_days: order[4]\r\n      })\r\n    }\r\n    async function createOrder(e) {\r\n      e.preventDefault();\r\n      const id = e.target.elements[0].value;\r\n      const cost = e.target.elements[1].value;\r\n      const productName = e.target.elements[2].value;\r\n      const description = e.target.elements[3].value;\r\n      const leadTime = parseInt(e.target.elements[4].value);\r\n      const owner = await contract.methods.ownerOf(id).call();\r\n      await contract.methods._createOrder(id, cost, productName, description, leadTime, owner).send({from: accounts[0]})\r\n      await updateOrders();\r\n    }\r\n    async function getBalance(w3, c, account) {\r\n      try {\r\n        let balance = await c.methods.balanceOf(account).call();\r\n        balance = parseFloat(w3.utils.fromWei(balance, \"ether\"));\r\n        return Promise.resolve(balance);\r\n      } catch(e) {\r\n        return Promise.reject(e);\r\n      }\r\n    }\r\n    return (\r\n        <div className='form-content-right'>\r\n          <BlockchainContext.Provider value={{web3, accounts, contract}}>\r\n        <form onSubmit={e => createOrder(e)} className='form' noValidate>\r\n           <h1>\r\n           Submit Order\r\n           </h1>\r\n           <div className='form-inputs'>\r\n             <label className='form-label'>ID</label>\r\n             <input\r\n               className='form-input'\r\n               type='ID'\r\n               name='ID'\r\n               value={values.ID}\r\n               onChange={handleChange}\r\n               \r\n             />\r\n           </div>\r\n           <div className='form-inputs'>\r\n             <label className='form-label'>Cost</label>\r\n             <input\r\n               className='form-input'\r\n               type='text'\r\n               name='Cost'\r\n               value={values.Cost}\r\n               onChange={handleChange}\r\n             />\r\n           </div>\r\n           <div className='form-inputs'>\r\n             <label className='form-label'>Product Name</label>\r\n             <input\r\n               className='form-input'\r\n               type='Product Name'\r\n               name='productName'\r\n               value={values.productName}\r\n               onChange={handleChange}\r\n   \r\n             />\r\n           </div>\r\n           <div className='form-inputs'>\r\n             <label className='form-label'>Description</label>\r\n             <input\r\n               className='form-input'\r\n               type='text'\r\n               name='Description'\r\n               value={values.Description}\r\n               onChange={handleChange}\r\n   \r\n             />\r\n           </div>\r\n           <div className='form-inputs'>\r\n             <label className='form-label'>Lead Time</label>\r\n             <input\r\n               className='form-input'\r\n               type='integer'\r\n               name='leadTime'\r\n               value={values.leadTime}\r\n               onChange={handleChange}\r\n   \r\n             />\r\n           </div>\r\n           <button className='form-input-btn' type='submit'>\r\n             Create Product Order\r\n           </button>\r\n         </form>\r\n         </BlockchainContext.Provider>\r\n       </div>\r\n   \r\n    );\r\n};\r\nexport default OrderCreation;","import React from 'react';\r\nimport './Order.css';\r\nimport OrderCreation from './OrderCreation';\r\nconst orderSuccess = () => {\r\n  return (\r\n    <div className='form-content-right' >\r\n      <h1 className='form-success'>Order Created</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default orderSuccess;","import React, {useState} from 'react';\r\nimport './Order.css';\r\nimport OrderCreation from './OrderCreation';\r\n\r\nimport OrderSuccess from './OrderSuccess';\r\n\r\nconst Order = () => {\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n function submitForm(){\r\n   setIsSubmitted(true);\r\n }\r\n  \r\n  \r\n\r\n \r\n  return (\r\n  <>\r\n      <div className='form-container'>\r\n        <span className='close-btn'>×</span>\r\n        <div className='form-content-left'>\r\n          <img className='form-img' src='https://mail.google.com/mail/u/0?ui=2&ik=cc27f181e0&attid=0.1&permmsgid=msg-f:1704217228058428934&th=17a6988a22860606&view=fimg&sz=s0-l75-ft&attbid=ANGjdJ-_nuRHgtZYhvaAtD90pxVMWMD2El0lJhxCxOA0ej732X6arqe3cFpe4jw4zwpZM-34sk7cZmNnLzWoAZYc67gw2fVgs-T7qJTowxcsazmcnb4PNcni3PFhnRw&disp=emb&realattid=17a69886a2f510067321' alt='Order Submission' />\r\n        </div>\r\n        {!isSubmitted ? (\r\n          <OrderCreation />\r\n        ) : (\r\n          <OrderSuccess />\r\n        )}\r\n        \r\n     \r\n          </div>\r\n          </>\r\n  );\r\n};\r\n\r\nexport default Order;","import React from 'react';\r\nimport './App.css';\r\nimport useForm from './useForm';\r\nimport validate from './validate';\r\nimport Order from './Order.js';\r\n\r\nfunction App () {\r\n  const {handleChange, values } = useForm(\r\n    validate\r\n  );\r\n\r\n  \r\n \r\n  \r\n\r\n \r\n \r\n \r\n \r\n\r\n  return (\r\n    <div>\r\n    <Order/>\r\n</div>\r\n);\r\n  \r\n  }\r\n  \r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nwindow.addEventListener('load', async function () {\r\n  try {\r\n    return await window.ethereum.request({\r\n      method: 'eth_requestAccounts'\r\n    }) \r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n})\r\n\r\nReactDOM.render(\r\n  \r\n        <App />\r\n        \r\n  ,\r\ndocument.getElementById('root')\r\n);"],"sourceRoot":""}